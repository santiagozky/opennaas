/**
 *  This code is part of the Harmony System implemented in Work Package 1 
 *  of the Phosphorus project. This work is supported by the European 
 *  Comission under the Sixth Framework Programme with contract number 
 *  IST-034115.
 *
 *  Copyright (C) 2006-2009 Phosphorus WP1 partners. Phosphorus Consortium.
 *  http://ist-phosphorus.eu/
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */

package org.opennaas.extensions.idb.da.dummy.webservice;

import org.opennaas.extensions.idb.da.dummy.handler.TopologyHandler;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.AddDomainResponseType;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.AddDomainType;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.AddEndpointResponseType;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.AddEndpointType;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.AddLinkResponseType;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.AddLinkType;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.AddOrEditDomainResponseType;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.AddOrEditDomainType;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.DeleteDomainResponseType;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.DeleteDomainType;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.DeleteEndpointResponseType;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.DeleteEndpointType;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.DeleteLinkResponseType;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.DeleteLinkType;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.DomainAlreadyExistsFault_Exception;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.DomainNotFoundFault_Exception;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.EditDomainResponseType;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.EditDomainType;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.EditEndpointResponseType;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.EditEndpointType;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.EditLinkResponseType;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.EditLinkType;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.EndpointAlreadyExistsFault_Exception;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.GetDomainsResponseType;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.GetDomainsType;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.GetEndpointsResponseType;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.GetEndpointsType;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.GetLinksResponseType;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.GetLinksType;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.InvalidRequestFault_Exception;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.OperationNotAllowedFault_Exception;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.OperationNotSupportedFault_Exception;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.TopologyIFPortType;
import org.opennaas.extensions.idb.serviceinterface.databinding.jaxb.UnexpectedFault_Exception;

/**
 * nrpsDummyTopology server. MyCapability.java Thu Jun 26 10:38:49 CEST 2008
 * Generated by the Apache Muse Code Generation Tool ..but modified
 */
public class TopologyWS implements TopologyIFPortType {

	@Override
	public GetDomainsResponseType getDomains(GetDomainsType getDomains)
			throws InvalidRequestFault_Exception, UnexpectedFault_Exception,
			OperationNotSupportedFault_Exception,
			OperationNotAllowedFault_Exception {
		return TopologyHandler.getInstance().getDomains(getDomains);
	}

	@Override
	public GetEndpointsResponseType getEndpoints(GetEndpointsType getEndpoints)
			throws InvalidRequestFault_Exception, UnexpectedFault_Exception,
			OperationNotSupportedFault_Exception,
			OperationNotAllowedFault_Exception {
		return TopologyHandler.getInstance().getEndpoints(getEndpoints);
	}

	@Override
	public AddDomainResponseType addDomain(AddDomainType addDomain)
			throws DomainAlreadyExistsFault_Exception,
			InvalidRequestFault_Exception, UnexpectedFault_Exception,
			OperationNotSupportedFault_Exception,
			OperationNotAllowedFault_Exception {
		return TopologyHandler.getInstance().addDomain(addDomain);
	}

	@Override
	public GetLinksResponseType getLinks(GetLinksType getLinks)
			throws InvalidRequestFault_Exception, UnexpectedFault_Exception,
			OperationNotSupportedFault_Exception,
			OperationNotAllowedFault_Exception {
		return TopologyHandler.getInstance().getLinks(getLinks);
	}

	@Override
	public EditDomainResponseType editDomain(EditDomainType editDomain)
			throws InvalidRequestFault_Exception, UnexpectedFault_Exception,
			DomainNotFoundFault_Exception,
			OperationNotSupportedFault_Exception,
			OperationNotAllowedFault_Exception {
		return TopologyHandler.getInstance().editDomain(editDomain);
	}

	@Override
	public DeleteEndpointResponseType deleteEndpoint(
			DeleteEndpointType deleteEndpoint)
			throws InvalidRequestFault_Exception, UnexpectedFault_Exception,
			OperationNotSupportedFault_Exception,
			OperationNotAllowedFault_Exception {
		return TopologyHandler.getInstance().deleteEndpoint(deleteEndpoint);
	}

	@Override
	public DeleteDomainResponseType deleteDomain(DeleteDomainType deleteDomain)
			throws InvalidRequestFault_Exception, UnexpectedFault_Exception,
			DomainNotFoundFault_Exception,
			OperationNotSupportedFault_Exception,
			OperationNotAllowedFault_Exception {
		return TopologyHandler.getInstance().deleteDomain(deleteDomain);
	}

	@Override
	public DeleteLinkResponseType deleteLink(DeleteLinkType deleteLink)
			throws InvalidRequestFault_Exception, UnexpectedFault_Exception,
			OperationNotSupportedFault_Exception,
			OperationNotAllowedFault_Exception {
		return TopologyHandler.getInstance().deleteLink(deleteLink);
	}

	@Override
	public AddLinkResponseType addLink(AddLinkType addLink)
			throws InvalidRequestFault_Exception, UnexpectedFault_Exception,
			OperationNotSupportedFault_Exception,
			OperationNotAllowedFault_Exception {
		return TopologyHandler.getInstance().addLink(addLink);
	}

	@Override
	public EditEndpointResponseType editEndpoint(EditEndpointType editEndpoint)
			throws InvalidRequestFault_Exception, UnexpectedFault_Exception,
			OperationNotSupportedFault_Exception,
			OperationNotAllowedFault_Exception {
		return TopologyHandler.getInstance().editEndpoint(editEndpoint);
	}

	@Override
	public AddEndpointResponseType addEndpoint(AddEndpointType addEndpoint)
			throws InvalidRequestFault_Exception,
			EndpointAlreadyExistsFault_Exception, UnexpectedFault_Exception,
			DomainNotFoundFault_Exception,
			OperationNotSupportedFault_Exception,
			OperationNotAllowedFault_Exception {
		return TopologyHandler.getInstance().addEndpoint(addEndpoint);
	}

	@Override
	public EditLinkResponseType editLink(EditLinkType editLink)
			throws InvalidRequestFault_Exception, UnexpectedFault_Exception,
			OperationNotSupportedFault_Exception,
			OperationNotAllowedFault_Exception {
		return TopologyHandler.getInstance().editLink(editLink);
	}

	@Override
	public AddOrEditDomainResponseType addOrEditDomain(
			AddOrEditDomainType addOrEditDomain)
			throws InvalidRequestFault_Exception, UnexpectedFault_Exception,
			OperationNotSupportedFault_Exception,
			OperationNotAllowedFault_Exception {
		return TopologyHandler.getInstance().addOrEditDomain(addOrEditDomain);
	}

}
