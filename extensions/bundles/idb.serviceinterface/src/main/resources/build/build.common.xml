<!--
 /**
  * Build script for the network service plane.
  *
  * @author Jan Gassen (gassen@cs.uni-bonn.de)
  */
-->
<project basedir="../../">
    <property file="build.local.properties" />
    <property file="build.properties" />
    <property file="resources/build/build.common.properties" />
    <property environment="env" />

    <path id="classpath.tools">
        <fileset dir="${dir.libs}">
            <include name="*.jar" />
            <include name="*.aar" />
        </fileset>
    </path>
    
    <condition property="doInit">
        <not>
            <equals arg1="${env.QUICK}" arg2="1"/>
        </not>
    </condition>

    <!--
    /**
     * Installs the project after inital checkout
     */
    //-->
    <target name="install" if="doInstall" depends="checkEnv, checkConnection, installAntAdds">
        <touch file=".installed" />
    </target>

    <!--
    /**
     * Download all neccessary libraries and put them into the libs folder.
     */
    -->
    <target name="init" depends="checkInstalled, checkConnection, defineTasks" description="Download dependend Libraries">

        <!--
        /**
         * Support for local dependencies.
         * add a property named local.init to your build.properties to call
         * targets from build.xml on common init.
         */
        //-->
        <if property="local.init">
            <loop commaSeperatedList="${local.init}">
                <ant antfile="build.xml" target="${val}" />
            </loop>
        </if>

        <!-- Create directory structure //-->
        <mkdir dir="${dir.libs}" />
        <mkdir dir="${dir.doc}" />
        <mkdir dir="${dir.dist}" />
        <mkdir dir="${dir.log}" />
        <mkdir dir="${dir.temp}" />
        
        <if property="doInit">
            <getFile jar="junit-4.4" dst="${dir.libs}" />
            <getFiles libs="${dir.libs}" proxy="${url.proxy}" />
        </if>
    </target>

    <!--
    /**
     * Build project.
     */
    -->
    <target name="build" description="Build" >
        <mkdir dir="${dir.build}" />
        <mkdir dir="${dir.upload}" />

        <!-- Extra dir for upload jar //-->
        <condition property="dir.dst" value="${dir.upload}" else="${dir.libs}">
            <isset property="upload" />
        </condition>
        <condition property="excludes" value="**/*_local.properties" else="">
            <isset property="upload" />
        </condition>

        <!-- Compile source //-->
        <javac debug="on" destdir="${dir.build}" target="${ant.build.javac.target}" verbose="no">
            <src path="${dir.src}" />
            <classpath>
                <fileset dir="${dir.libs}">
                    <include name="*.jar" />
                    <include name="*.aar" />
                </fileset>
            </classpath>
            <compilerarg value="-Xlint"/>
            <compilerarg value="-Xlint:-serial"/>
            <compilerarg value="-Xlint:-path"/>
        </javac>

        <createIndex />

        <!-- Build jar file //-->
        <jar destfile="${dir.dst}/${jarfile}" basedir="${dir.build}">
            <fileset dir="${dir.build}">
                <include name="eu/**/*.java" />
            </fileset>
            <fileset dir="${dir.src}">
                <include name="eu/**/*.xml" />
            </fileset>
            <fileset dir="${dir.resources}">
                <include name="**/*" />
                <exclude name="${excludes}" />
            </fileset>
        </jar>

        <!-- Apply options to Jar (see Jar Properties in build.properties) //-->
        <if property="upload">
            <applyJarOpts />
        </if>
    </target>

    <!--
    /**
     * Upload jarfile to proxy
     */
    -->
    <target name="upload" depends="checkInstalled, checkConnection, defineTasks" description="Upload jarfile to proxy">
        <fail>
            <condition>
                <not>
                    <or>
                        <os family="mac" />
                        <os family="unix" />
                    </or>
                </not>
            </condition>

                Unable to run task on ${os.name}!
                
                This is an OS-specific task.
                It is only executable on Unix (including Mac OS X) machines
                
                On other machines, you need to upload ${jarfile} manually to ${url.upload}
            </fail>

        <antcall target="build">
            <param name="upload" value="true" />
        </antcall>

        <input message="Please enter username:" addproperty="upload.user" />
        <input message="Please enter password:" addproperty="upload.pwd" />

        <echo>Upload ${jarfile} to ${url.upload}</echo>

        <davput url="${url.upload}" userid="${upload.user}" password="${upload.pwd}" lock="false" overwrite="true">
            <fileset dir="${dir.upload}">
                <include name="${jarfile}" />
            </fileset>
        </davput>
    </target>

    <!--
    /**
     * Export zip file.
     */
    -->
    <target name="export" description="Export zip file" depends="build, javadoc">
        <!-- Create zip file for export //-->
        <zip destfile="${zipfile}" basedir=".">
            <include name="${dir.libs}/**" />
            <include name="${dir.test}/**" />
            <include name="${dir.doc}/**" />
            <include name="${dir.resources}/**" />
            <include name="*.xml" />
            <include name=".project" />
            <include name=".classpath" />
            <include name="README" />
            <exclude name="**/.svn" />
        </zip>
    </target>

    <!--
    /**
     * Run Junit test.
     * Use -Dclass=TestClass to run only one specific test
     */
    -->
    <target name="testJunit" depends="build">
        <mkdir dir="${dir.reports}" />
        <mkdir dir="${dir.doc}" />
        <mkdir dir="${dir.doc.junit}" />
        <mkdir dir="${dir.doc.junit}/xml" />

        <condition property="includes" value="${class}.class" else="Test*">
            <isset property="class" />
        </condition>

        <junit printsummary="true" forkmode="perBatch" failureproperty="test.failure" haltonfailure="false">
            <formatter type="xml" />
            <classpath>
                <pathelement path="${dir.resources}" />
                <path refid="classpath.tools" />
            </classpath>
            <batchtest fork="true" todir="${dir.doc.junit}/xml">
                <fileset dir="${dir.build}" includes="**/${includes}" />
            </batchtest>
        </junit>

        <junitreport todir="${dir.doc.junit}">
            <fileset dir="${dir.doc.junit}/xml">
                <include name="TEST-*.xml" />
            </fileset>
            <report todir="${dir.doc.junit}" />
        </junitreport>
        <fail message="test failed" if="test.failure" />
    </target>

    <!--
    /**
     * Run Coverage Test.
     */
    //-->
    <target name="testCoverage" depends="build">
        <mkdir dir="${dir.instrumented}" />
        <mkdir dir="${dir.instrumented}/classes" />
        <mkdir dir="${dir.reports}" />
        <mkdir dir="${dir.doc}" />
        <mkdir dir="${dir.doc.junit}" />
        <mkdir dir="${dir.doc.junit}/xml" />
        <mkdir dir="${dir.doc.coverage}" />

        <emma>
            <instr instrpath="${dir.build}" destdir="${dir.instrumented}" metadatafile="${dir.reports}/metadata.emma" merge="true" mode="fullcopy" />
        </emma>

        <junit printsummary="true" forkmode="perBatch" failureproperty="test.failure" haltonfailure="false">
            <jvmarg value="-Demma.coverage.out.file=${dir.reports}/coverage.emma" />
            <jvmarg value="-Demma.coverage.out.merge=true" />
            <formatter type="xml" />

            <classpath>
                <pathelement path="${dir.instrumented}/classes" />
                <pathelement path="${dir.src}" />
                <pathelement path="${dir.resources}" />
                <fileset dir="${dir.libs}">
                    <exclude name="${jarfile}" />
                </fileset>
                <fileset dir="${dir.ant_adds}">
                    <include name="**/*emma*.jar" />
                </fileset>
            </classpath>

            <batchtest fork="yes" todir="${dir.doc.junit}/xml">
                <fileset dir="${dir.instrumented}/classes" includes="eu/**/Test*" excludes="**/Test*$$*" />
            </batchtest>
        </junit>

        <junitreport todir="${dir.doc.junit}">
            <fileset dir="${dir.doc.junit}/xml">
                <include name="TEST-*.xml" />
            </fileset>
            <report todir="${dir.doc.junit}" />
        </junitreport>

        <emma>
            <report sourcepath="${dir.src}">
                <fileset dir="${dir.reports}">
                    <include name="*.emma" />
                </fileset>
                <html outfile="${dir.doc.coverage}/index.html" />
            </report>
        </emma>

        <echo>Coverage Results:</echo>
        <echo>${basedir}/${dir.doc.coverage}/index.html</echo>
        <echo>JUnit Results:</echo>
        <echo>${basedir}/${dir.doc.junit}/index.html</echo>
        <fail message="test failed" if="test.failure" />
    </target>

    <!--
    /**
     * Test the Module.
     */
    //-->
    <target name="test" depends="testCoverage" description="Test the module" />

    <!--
    /**
     * Clean up the project.
     */
    -->
    <target name="clean" description="Clean up the Project">
        <!-- Delete all temporary files //-->
        <delete quiet="true" dir="${dir.dist}" />
        <delete quiet="true" file="${zipfile}" />
        <delete quiet="true" dir="${dir.doc}" />
        <!--delete quiet="true" dir="${dir.libs}" /-->
        <delete quiet="true" dir="${dir.log}" />
        <delete quiet="true" dir="${dir.temp}" />
        <delete quiet="true" dir="${dir.ant_adds}" />
        <delete quiet="true" dir="${dir.nightly}" />
        <delete quiet="true" file=".installed" />
    </target>

    <!--
    /**
     * Clean up the project.
     */
    -->
    <target name="reset" depends="clean" description="Clean up the Project, delete common buildscripts">
        <delete quiet="true" file="resources/build/build.common.xml" />
        <delete quiet="true" file="resources/build/build.common.properties" />
        <delete quiet="true" file="resources/scripts/antComplete.sh" />
        <delete quiet="true" file="README.1st" />
        <delete quiet="true" file="${keystore}" />
    </target>

    <!--
    /**
     * Tag this module as stable.
     */
    //-->
    <target name="tag" description="tag current version as stable">
        <input message="Please enter module path (from ${tag.repository}/)" addproperty="tag.module" />

        <input message="Please enter username" addproperty="tag.user" />

        <tstamp>
            <format property="TODAY" pattern="yyyyMMdd" />
        </tstamp>

        <condition property="finalTagName" value="${tag.name}-${TODAY}" else="${tag.name}">
            <istrue value="${tag.addTimestamp}" />
        </condition>

        <echo>
    Using the following configuration:
    ----------------------------------
    Repository : ${tag.repository}/${tag.module}
      +- From  : trunk
      +- To    : tags/${finalTagName}
    Message    : ${tag.message}
    Tag        : ${finalTagName}
    Username   : ${tag.user}
        </echo>

        <input message="Proceed? (y/N)" addproperty="tag.proceed" />

        <fail message="Aborted by user">
            <condition>
                <not>
                    <equals arg1="y" arg2="${tag.proceed}" />
                </not>
            </condition>
        </fail>

        <exec executable="svn" failonerror="true">
            <arg line="copy ${tag.repository}/${tag.module}/trunk ${tag.repository}/${tag.module}/tags/${finalTagName} --username ${tag.user} -m '${tag.message}'" />
        </exec>
    </target>

    <!--
    /**
     * Check connection to proxy
     */
    //-->
    <target name="checkConnection" unless="checked">

       <!-- <fail>
            <condition>
                <not>
                    <http url="${url.proxy}" />
                </not>
            </condition>

    ${url.proxy} is not reachable!

    Try this quickfix: export ANT_OPTS="$ANT_OPTS -Djavax.net.ssl.trustStore=${dir.utils}/keystore"
            
    This may have serveral reasons:
            
    1) You are not connected to the internet
    2) The requested url is unavailable
    3) The used certificate is not stored in your java keystore
            
        In this case you have 2 options:
            
            Add cert to a custom keystore by entering
            
            keytool -import -alias &lt;alias&gt; -file &lt;.cer file&gt; -keystore &lt;name&gt;
            
            in the command prompt and
            
                a) set ant environment variable:
                    ANT_OPTS=-Djavax.net.ssl.trustStore=&lt;name&gt;
                b) start ant with parameter
                    ant &lt;target&gt; -Djavax.net.ssl.trustStore=&lt;name&gt;
                
            Or add the certificate to your main keystore
            
    Please have a look at the README for more informations!
        </fail> -->

        <echo>Connection available!</echo>
    </target>

    <!--
    /**
     * Check environment
     */
    //-->
    <target name="checkEnv">
        <!-- Check Ant version //-->
        <fail>
            <condition>
                <not>
                    <antversion atleast="1.7.0" />
                </not>
            </condition>
    Wrong ant version!
            
    You have ${ant.version} installed, you need at least Ant 1.7.0!
        </fail>

        <echo>Compiling for java version ${ant.build.javac.target}</echo>

        <!-- Check SVN availability //-->
        <condition property="svn_warn" value="!! WARNING !! SVN is not found on classpath! This script may not work properly!" else="SVN [OK]">
            <not>
                <available file="svn" filepath="${env.PATH}" />
            </not>
        </condition>
        <echo>${svn_warn}</echo>
    </target>

    <!--
    /**
     * Check if the Project is installed.
     */
    //-->
    <target name="checkInstalled">
        <condition property="doInstall">
            <not>
                <available file=".installed" />
            </not>
        </condition>

        <antcall target="install" />
    </target>

    <!--
    /**
     * Download jar archive to temp folder
     */
    -->
    <target name="downloadFile">
        <get verbose="false" usetimestamp="true" src="${url.proxy}/${download.filename}" dest="${download.path}/${download.filename}" />
    </target>

    <!--
    /**
     * Copy downloaded file to a second location
     */
    -->
    <target name="copyFile" if="download.cc">
        <copy file="${download.path}/${download.filename}" todir="${download.cc}" />
    </target>

    <!--
    /**
     * Download zip archive to temp folder and extract
     */
    -->
    <target name="extractFile" if="download.extract">
        <unzip src="${download.path}/${zip}.zip" dest="${dir.libs}">
            <patternset>
                <include name="**/${jar}.jar" />
            </patternset>
            <mapper type="flatten" />
        </unzip>
    </target>

    <!--
    /**
     * Download zip archive to temp folder and extract
     */
    -->
    <target name="unzipFile" if="download.unzip">
        <mkdir dir="${download.unzip}" />
        <unzip src="${download.path}/${zip}.zip" dest="${download.unzip}" />
    </target>

    <!--
    /**
     * Delete downloaded file
     */
    -->
    <target name="deleteFile" if="download.delete">
        <delete file="${download.path}/${download.filename}" />
    </target>

    <!--
    /**
     * Target to adjust the scope of the macro attributes
     */
    -->
    <target name="getFileAttributeProxy">
        <condition property="download.filename" value="${jar}.jar" else="${zip}.zip">
            <equals arg1="false" arg2="${zip}" />
        </condition>

        <condition property="download.path" value="${dst}" else="${tmp}">
            <equals arg1="false" arg2="${tmp}" />
        </condition>

        <condition property="download.cc" value="${cc}">
            <not>
                <equals arg1="false" arg2="${cc}" />
            </not>
        </condition>
        <condition property="download.extract">
            <and>
                <not>
                    <equals arg1="false" arg2="${zip}" />
                </not>
                <not>
                    <equals arg1="false" arg2="${jar}" />
                </not>
            </and>
        </condition>
        <condition property="download.unzip">
            <not>
                <equals arg1="false" arg2="${install}" />
            </not>
        </condition>

        <antcall target="downloadFile" />
        <antcall target="extractFile" />
        <antcall target="unzipFile" />
        <antcall target="copyFile" />
    </target>

    <!--
    /**
     * Check if file exists and download to temp folder.
     * After this, copy requested jar to libs
     */
    -->
    <macrodef name="getFile">
        <attribute name="jar" default="false" description="Name of the jar file" />
        <attribute name="dst" default="false" description="Destination Path" />
        <attribute name="cc" default="false" />
        <attribute name="tmp" default="false" />
        <attribute name="zip" default="false" />
        <attribute name="install" default="false" />

        <sequential>
                <antcall target="getFileAttributeProxy">
                    <param name="jar" value="@{jar}" />
                    <param name="dst" value="@{dst}" />
                    <param name="cc" value="@{cc}" />
                    <param name="tmp" value="@{tmp}" />
                    <param name="zip" value="@{zip}" />
                    <param name="install" value="@{install}" />
                </antcall>
        </sequential>        
    </macrodef>

    <!--
    /**
     * Execute ant calls
     */
    -->
    <target name="installFileExecutor" unless="exists">
        <antcall target="downloadFile" />
        <antcall target="unzipFile" />
        <antcall target="deleteFile" />
    </target>

    <!--
    /**
     * Map parameters to adjust namespace
     */
    -->
    <target name="installFileAttributeProxy">
        <condition property="exists">
            <or>
                <available file="${dst}/${name}" />
                <available file="${dst}/${zip}" />
            </or>
        </condition>

        <property name="download.filename" value="${zip}.zip" />
        <property name="download.path" value="${dst}" />
        <property name="download.delete" value="true" />

        <condition property="download.unzip" value="${dst}/${zip}" else="${dst}/${name}">
            <equals arg1="false" arg2="${name}" />
        </condition>
        <echo>${download.unzip}</echo>

        <antcall target="installFileExecutor" />
    </target>

    <!--
    /**
     * Install a zipfile to a specified directory
     */
    -->
    <macrodef name="installFile">
        <attribute name="zip" description="Name of the zip file" />
        <attribute name="name" default="false" description="Name of the destination folder" />
        <attribute name="dst" description="Destination" />
        <sequential>
            <antcall target="installFileAttributeProxy">
                <param name="zip" value="@{zip}" />
                <param name="dst" value="@{dst}" />
                <param name="name" value="@{name}" />
            </antcall>
        </sequential>
    </macrodef>

    <!--
    /**
     * Install Ant additions
     */
    -->
    <target name="installAntAdds" if="doInit">
        <mkdir dir="${dir.ant_adds}" />

        <installFile zip="jakarta-slide-ant-webdav-bin-2.1" dst="${dir.ant_adds}" />
        <installFile zip="emma-2.0.5312" dst="${dir.ant_adds}" />
        <getFile jar="harmony-common-ant" dst="${dir.ant_adds}" />

        <getFile jar="findbugs" dst="${dir.ant_adds}" />
        <getFile jar="findbugs-ant" dst="${dir.ant_adds}" />
        <getFile jar="dom4j-1.6.1" dst="${dir.ant_adds}" />
        <getFile jar="asm-commons-3.1" dst="${dir.ant_adds}" />
        <getFile jar="jsr305" dst="${dir.ant_adds}" />
        <getFile jar="annotations" dst="${dir.ant_adds}" />
        <getFile jar="asm-tree-3.1" dst="${dir.ant_adds}" />
        <getFile jar="jaxen-1.1.1" dst="${dir.ant_adds}" />
        <getFile jar="asm-3.1" dst="${dir.ant_adds}" />
        <getFile jar="bcel" dst="${dir.ant_adds}" />
        <getFile jar="jFormatString" dst="${dir.ant_adds}" />
        
        <getFile jar="pmd-4.2.5" dst="${dir.ant_adds}" />
        <getFile jar="checkstyle-all-5.0-beta01" dst="${dir.ant_adds}" />
    </target>

    <!--
    /**
     * Define Ant Tasks
     */
    //-->
    <target name="defineTasks" depends="installAntAdds">
        <path id="ant.tools">
            <fileset dir="${dir.ant_adds}">
                <include name="**/*.jar" />
            </fileset>
        </path>

       <taskdef
            resource="checkstyletask.properties"
            classpathref="ant.tools" />

        <taskdef name="findbugs"
            classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
            classpathref="ant.tools" />

        <taskdef name="pmd"
            classname="net.sourceforge.pmd.ant.PMDTask"
            classpathref="ant.tools" />

        <taskdef name="davput"
            classname="org.apache.webdav.ant.taskdefs.Put"
            classpathref="ant.tools" />

        <taskdef resource="emma_ant.properties" classpathref="ant.tools" />

        <taskdef name="getFiles" classname="eu.ist_phosphorus.harmony.common.ant.tasks.GetFiles">
            <classpath refid="ant.tools" />
        </taskdef>

        <taskdef name="loop" classname="eu.ist_phosphorus.harmony.common.ant.tasks.Loop">
            <classpath refid="ant.tools" />
        </taskdef>

        <taskdef name="if" classname="eu.ist_phosphorus.harmony.common.ant.tasks.If">
            <classpath refid="ant.tools" />
        </taskdef>

        <taskdef name="createIndex" classname="eu.ist_phosphorus.harmony.common.ant.tasks.CreateIndex">
            <classpath refid="ant.tools" />
        </taskdef>
    </target>

    <!--
    /**
     * Attach source to existing jar file.
     */
    -->
    <target name="attachSource" if="doSource">
        <jar destfile="${dir.upload}/${jarfile}" update="true" basedir="${dir.src}">
        </jar>
    </target>

    <!--
    /**
     * Sign the builded jar.
     */
    -->
    <target name="signJar" if="doSign">
        <signjar jar="${dir.libs}/${jarfile}" keystore="${keystore}" alias="${alias}" storepass="${storepass}" />
    </target>

    <!--
    /**
     * Apply Jar options.
     *
     * It will attach source to jar if jar.source is set to true, yes, or on.
     * It will sign the jar, if jar.sign is set to true, yes, or on.
     */
    //-->
    <macrodef name="applyJarOpts">
        <sequential>
            <condition property="doSign">
                <istrue value="${jar.sign}" />
            </condition>
            <condition property="doSource">
                <istrue value="${jar.source}" />
            </condition>
            <antcall target="attachSource" />
            <antcall target="signJar" />
        </sequential>
    </macrodef>

    <!--
    /**
     * Generate Documentation.
     */
    //-->
    <target name="javadoc">
        <mkdir dir="${dir.doc.javadoc}" />

        <javadoc sourcepath="${dir.src}" packagenames="eu.ist_phosphorus.*" destdir="${dir.doc.javadoc}">
            <classpath refid="classpath.tools" />
            <doctitle>
                <![CDATA[<h1>Phosphorus WP1</h1>]]></doctitle>
        <tag name="todo" scope="all" description="To do:" />
    </javadoc>
</target>

<target name="analyze" description="Analyze the sources for bugs"
        depends="build, findbugs, pmd, javadoc, checkstyle">
</target>

    <target name="findbugs" depends="build">
        <findbugs home="${dir.ant_adds}"
            output="text"
            warningsProperty="fb.fail"
            effort="min"
            jvmargs="-Xms256m -Xmx256m"
            reportLevel="low">
            <auxClasspath>
                <pathelement path="${dir.resources}" />
                <path refid="classpath.tools" />
            </auxClasspath>
            <sourcePath path="${dir.src}" />
            <class location="${dir.build}" />
        </findbugs>
    </target>
    <target name="pmd" depends="init">
        <pmd shortFilenames="true" failuresPropertyName="pmd.fail" minimumPriority="3">
          <ruleset>${dir.utils}/pmdRules.xml</ruleset>      
          <formatter type="text" toConsole="true" />
          <fileset dir="${dir.src}">
           <include name="**/*.java"/>
          </fileset>
        </pmd>
    </target>
    <target name="checkstyle" depends="defineTasks">
        <checkstyle config="${dir.utils}/checkstyleRules.xml" failureProperty="cs.fail" classpathref="classpath.tools">
          <fileset dir="${dir.src}" includes="**/*.java"/>
        </checkstyle>
    </target>
    <target name="todo" depends="defineTasks">
        <checkstyle config="${dir.utils}/checkstyleTodoRules.xml" failureProperty="cs.fail" classpathref="classpath.tools">
          <fileset dir="${dir.src}" includes="**/*.java"/>
        </checkstyle>
    </target>
</project>
