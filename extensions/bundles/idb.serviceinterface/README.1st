================================================================================

           _/_/_/    _/_/_/_/    _/_/    _/_/_/    _/      _/  _/_/_/_/
          _/    _/  _/        _/    _/  _/    _/  _/_/  _/_/  _/
         _/_/_/    _/_/_/    _/_/_/_/  _/    _/  _/  _/  _/  _/_/_/
        _/    _/  _/        _/    _/  _/    _/  _/      _/  _/
       _/    _/  _/_/_/_/  _/    _/  _/_/_/    _/      _/  _/_/_/_/

                      - IST Phosphorus Harmony System -
================================================================================


== Prerequisites ==
 * Needed
   * ''OS'':  Unix (Linux/OS X) with bash
   * ''Build'': Ant 1.7.0 or later (http://ant.apache.org)
   * ''VM'': Java 6 or later (http://java.sun.com)
   * ''Environment'': export ANT_OPTS="-Djavax.net.ssl.trustStore=resources/utils/keystore"
 * Optional
   * ''Server'': Apache Tomcat 6 or Mortbay Jetty 6 or later (might be used within the Adapter and Broker)
   * ''Databinding'': Sun JAXB 2.0.5 or later (used within the HSI module)
   * ''WSRF'': Apache Muse 2.2.0 or later (used within the HSI module)


== Buildsystem ==
We're using a multi level build system:

 * Step 1: Core system (after initial checkout)
   * ''copy'': Make a copy of the current project/module to another directory (w/o the subversion configuration)
   * ''prepare'': Download common build tasks from the repository (Step 2)
   * Here you can also define module specific tasks. E.g.:
     * ''deploy'': Generate a WAR file and copy it to the servlet container.
     * ''generate'': Generate databinding and Webservice classes.
     * ''report'': Test all modules and generate a test report.
   * If you want to have your module specific tasks to be called on ''init'', you can add a property called ''local.init'' with a comma seperated list of tasks to the build.properties
 * Step 2: Common build tasks (after ''prepare'')
   * ''build'': Compile all resources
   * ''clean'': Delete all temporary and compiled files
   * ''export'': Generate a ZIP file that contains the Eclipse project with all libraries (usually not needed)
   * ''init'': Download all needed libraries (see ''.classpath'')
   * ''reset'': Delete all temporary and compiled files and reset the build system
   * ''tag'': Tag current version as stable in the repository
   * ''test'': Test the module (very important! this is used by the nightly build)
   * ''upload'': Upload the module as a library to the server (needed if module is used by other modules)


== Modules ==
The different modules can be developed independently and share common modules by using uploaded JAR files:

 * ''harmony.adapter.argon'': The ARGON Adapter.
 * ''harmony.adapter.dummy'': The Dummy Adapter.
 * ''harmony.adapter.thin'': The Thin GMPLS Adapter.
 * ''harmony.adapter.uclp'': The UCLP/ARGIA Adapter.
 * ''harmony.common.ant'': The common build targets.
 * ''harmony.common.utils'': Some common utility libraries.
 * ''harmony.common.security'': The AAA module.
 * ''harmony.common.serviceinterface'': The HSI implementation (used by Adapters and Brokers)
 * ''harmony.idb'': The Inter Domain Broker.
 * ''harmony.template'': A template to create new modules (see ''ant copy'').
 * ''harmony.test'': The Nightly Build system.
 * ''harmony.ui.reservationcli'': A User Interface: Reservation CLI.
 * ''harmony.ui.topologygui'': A User Interface: Topology GUI.
 * ''harmony.ui.webgui'': A User Interface: Web GUI.
 * ''phosphorus.gmpls'': The GMPLS WS implementation.


== Directories and Files ==
Some directories and files are created and downloaded while the build process is in progress:

 * ''bin'': Eclipse build directory.
 * ''dist'': Ant build directory.
 * ''doc'': !JavaDoc, JUnit and Coverage results.
 * ''lib'': External libraries.
 * ''log'': Logging information.
 * ''resources'': Properties, build system, scripts and other useful files
 * ''src'': The sources of the module.
 * ''temp'': Temporary files for the build system.
 * ''build.local.properties'': Local information for the build system (not in the repository)
 * ''build.properties'': Build configuration for the module.
 * ''build.xml'': The modules build file.
 * ''README'': The modules README file.
 * ''README.1st'': The general README file.


== Testing ==
 * Testing via local method calls (faster)
   * ''resources/properties/test.properties'': test.callWebservice = false
   * ''resources/properties/idb.properties'': passViaWebservice = false (optional)
   * ant test
 * Testing via Webservice calls (more secure)
   * ''resources/properties/test.properties'': test.callWebservice = true
   * ''resources/properties/idb.properties'': passViaWebservice = true (optional)
   * ant build deploy
   * ant test

== Logging ==
 * Simple Logging
   * create a file logging.properties under resources/properties in your project
   * add lines like:
   		a.out	= CONSOLE 
		a.level	= WARN
		b.out 	= FILE.test.log
		b.level = DEBUG
	* Appender named a describes a new ConsoleAppender with threshold WARN
	* Appender named b describes a new FileAppender with threshold DEBUG an outputfile {logdir}/test.log
	* attributes (out, level) have to exist

== Overriding Properties with local properties ==
Every Modul has its own specific properties. If you want to override some 
properties of a specific modul you just have to place a new property file
in your resources/properties folder. for example, if you want to override
utils. properties you have to place a text file named:
utils_local.properties in your main project.
All properties that are defined in the new property-file will override the
properties of the specific jar file.

SHORT: for a file named "abc.properties" create a local file 
"abc_local.properties" with all properties you want to override.

== Example Workflow: Adapter ==
 1. Checkout the module via Eclipse from https://svn.uva.netherlight.nl/projects/phosphorus-wp1/modules/
 1. Initialize the module: ant prepare; ant build (should work)
 1. Refresh the Eclipse project (shouldn't show any compiling problems)
 1. Edit the HSI configuration: ''nano resources/properties/hsiXXX.properties''
 1. Test the Adapter locally: ''nano resources/properties/test.properties; ant test'' (change to test.callWebservice = false)
 1. Deploy the Adapter: ''echo dir.webapps=$WEBAPPS_HOME > build.local.properties; ant build deploy''
 1. Start the servlet container
 1. Test the Adapter via Webservice: ''nano resources/properties/test.properties; ant test'' (change to test.callWebservice = true)
 1. ''You can also test your Adapter using the WebGUI or ReservtionCLI...


================================================================================


Apendix A: Add new libraries
============================
 - Add the following line to .classpath: <classpathentry kind="lib" path="lib/FILENAME.jar"/>
 - Download libraries: ant init



Apendix B: Hints for own properties
===================================
build.common.xml imports

			build.local.properties		(host specific)
			build.properties		(module specific)
			build.common.properties		(general)

in this order, because Properties are immutable: whoever sets a property
first freezes it for the rest of the build; they are most definitely not
variables.
Be carefull using variables in your properties file, and make sure they
are defined when you use them.



Apendix C: Configure the environment
====================================

#!/bin/bash
#########################
# HOWTO: ". ./env.sh";  #
#########################

HARMONY_HOME=/opt/harmony
TOOLS_HOME=$HARMONY_HOME/tools

echo "Exporting configuration...";
export ANT_HOME=$TOOLS_HOME/ant/
export ANT_OPTS="$ANT_OPTS -Djavax.net.ssl.trustStore=resources/utils/keystore -XX:MaxPermSize=512M -Xms512M -Xmx512M"
export JAVA_HOME=$TOOLS_HOME/jdk1.6/
export JAVA_OPTS="-XX:+UseBiasedLocking -XX:+AggressiveOpts -XX:+UseParallelOldGC -Xss128k -XX:+UseLargePages -Xbatch -XX:+UseNUMA"
export PATH=$JAVA_HOME/bin:$ANT_HOME/bin/:$PATH
export JETTY_HOME=$TOOLS_HOME/jetty
export CATALINA_HOME=$TOOLS_HOME/tomcat
export WEBAPPS_HOME=$CATALINA_HOME/webapps

echo "You're now running...";
java -version 2>&1|head -n1 && ant -version

Apendix D: Use tab completion for ant
=====================================
Go to the modules root folder, wich contains the build.xml and run
. ./resources/scripts/antComplete.sh
After this, you are able to use tab completion for ant tasks.

Apendix E: Speed up the build process
=====================================
In order to avoid checking the installed libs version every time:
export QUICK=1