package org.opennaas.extensions.idb.serviceinterface.reservation;

import org.apache.muse.ws.addressing.EndpointReference;
import org.apache.muse.core.proxy.ReflectionProxyHandler;
import org.w3c.dom.Element;
import org.apache.muse.core.Environment;
import org.apache.muse.core.proxy.ProxyHandler;
import org.apache.muse.ws.addressing.soap.SoapFault;
import org.apache.muse.ws.addressing.soap.SoapClient;
import java.util.HashMap;
import javax.xml.namespace.QName;
import java.util.Map;
import org.apache.muse.ws.resource.remote.WsResourceClient;

/**
 * reservation client.
 *
 * ReservationClient.java
 * Tue May 08 17:48:31 CEST 2012
 * Generated by the Apache Muse Code Generation Tool
 */
 public class ReservationClient extends WsResourceClient implements IReservationClient {


    /**
     * isAvailable Handler.
     *
     * @param isAvailable Request
     * @return isAvailable Response
     * @throws SoapFault In case of errors
     */
    public Element isAvailable (Element isAvailable)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = isAvailable;

        ProxyHandler handler = getHandler("isAvailable");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }


    /**
     * activate Handler.
     *
     * @param activate Request
     * @return activate Response
     * @throws SoapFault In case of errors
     */
    public Element activate (Element activate)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = activate;

        ProxyHandler handler = getHandler("activate");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }


    /**
     * cancelJob Handler.
     *
     * @param cancelJob Request
     * @return cancelJob Response
     * @throws SoapFault In case of errors
     */
    public Element cancelJob (Element cancelJob)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = cancelJob;

        ProxyHandler handler = getHandler("cancelJob");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }


    /**
     * createReservation Handler.
     *
     * @param createReservation Request
     * @return createReservation Response
     * @throws SoapFault In case of errors
     */
    public Element createReservation (Element createReservation)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = createReservation;

        ProxyHandler handler = getHandler("createReservation");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }


    /**
     * notification Handler.
     *
     * @param notification Request
     * @return notification Response
     * @throws SoapFault In case of errors
     */
    public Element notification (Element notification)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = notification;

        ProxyHandler handler = getHandler("notification");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }


    /**
     * bind Handler.
     *
     * @param bind Request
     * @return bind Response
     * @throws SoapFault In case of errors
     */
    public Element bind (Element bind)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = bind;

        ProxyHandler handler = getHandler("bind");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }


    /**
     * getStatus Handler.
     *
     * @param getStatus Request
     * @return getStatus Response
     * @throws SoapFault In case of errors
     */
    public Element getStatus (Element getStatus)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = getStatus;

        ProxyHandler handler = getHandler("getStatus");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }


    /**
     * completeJob Handler.
     *
     * @param completeJob Request
     * @return completeJob Response
     * @throws SoapFault In case of errors
     */
    public Element completeJob (Element completeJob)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = completeJob;

        ProxyHandler handler = getHandler("completeJob");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }


    /**
     * getReservations Handler.
     *
     * @param getReservations Request
     * @return getReservations Response
     * @throws SoapFault In case of errors
     */
    public Element getReservations (Element getReservations)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = getReservations;

        ProxyHandler handler = getHandler("getReservations");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }


    /**
     * cancelReservation Handler.
     *
     * @param cancelReservation Request
     * @return cancelReservation Response
     * @throws SoapFault In case of errors
     */
    public Element cancelReservation (Element cancelReservation)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = cancelReservation;

        ProxyHandler handler = getHandler("cancelReservation");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }


    /**
     * getReservation Handler.
     *
     * @param getReservation Request
     * @return getReservation Response
     * @throws SoapFault In case of errors
     */
    public Element getReservation (Element getReservation)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = getReservation;

        ProxyHandler handler = getHandler("getReservation");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }

    private static final String[] _METHOD_NAMES = {
        "isAvailable", "activate", "cancelJob", "createReservation", "notification", "bind", "getStatus", "completeJob", "getReservations", "cancelReservation", "getReservation"
    };

    private static final Class[] _RETURN_TYPES = {
        Element.class, Element.class, Element.class, Element.class, Element.class, Element.class, Element.class, Element.class, Element.class, Element.class, Element.class
    };

    private static final String[] _ACTIONS = {
        "http://opennaas.org/nsp/webservice/reservation/isAvailable", "http://opennaas.org/nsp/webservice/reservation/activate", "http://opennaas.org/nsp/webservice/reservation/cancelJob", "http://opennaas.org/nsp/webservice/reservation/createReservation", "http://opennaas.org/nsp/webservice/reservation/notification", "http://opennaas.org/nsp/webservice/reservation/bind", "http://opennaas.org/nsp/webservice/reservation/getStatus", "http://opennaas.org/nsp/webservice/reservation/completeJob", "http://opennaas.org/nsp/webservice/reservation/getReservations", "http://opennaas.org/nsp/webservice/reservation/cancelReservation", "http://opennaas.org/nsp/webservice/reservation/getReservation"
    };

    private static final QName[] _REQUEST_NAMES = {
        new QName("http://opennaas.org/nsp/webservice/reservation", "isAvailable", "pfx0"), new QName("http://opennaas.org/nsp/webservice/reservation", "activate", "pfx0"), new QName("http://opennaas.org/nsp/webservice/reservation", "cancelJob", "pfx0"), new QName("http://opennaas.org/nsp/webservice/reservation", "createReservation", "pfx0"), new QName("http://opennaas.org/nsp/webservice/reservation", "notification", "pfx0"), new QName("http://opennaas.org/nsp/webservice/reservation", "bind", "pfx0"), new QName("http://opennaas.org/nsp/webservice/reservation", "getStatus", "pfx0"), new QName("http://opennaas.org/nsp/webservice/reservation", "completeJob", "pfx0"), new QName("http://opennaas.org/nsp/webservice/reservation", "getReservations", "pfx0"), new QName("http://opennaas.org/nsp/webservice/reservation", "cancelReservation", "pfx0"), new QName("http://opennaas.org/nsp/webservice/reservation", "getReservation", "pfx0")
    };

    private static final QName[] _RESPONSE_NAMES = {
        new QName("http://opennaas.org/nsp/webservice/reservation", "isAvailableResponse", "pfx0"), new QName("http://opennaas.org/nsp/webservice/reservation", "activateResponse", "pfx0"), new QName("http://opennaas.org/nsp/webservice/reservation", "cancelJobResponse", "pfx0"), new QName("http://opennaas.org/nsp/webservice/reservation", "createReservationResponse", "pfx0"), new QName("http://opennaas.org/nsp/webservice/reservation", "notificationResponse", "pfx0"), new QName("http://opennaas.org/nsp/webservice/reservation", "bindResponse", "pfx0"), new QName("http://opennaas.org/nsp/webservice/reservation", "getStatusResponse", "pfx0"), new QName("http://opennaas.org/nsp/webservice/reservation", "completeJobResponse", "pfx0"), new QName("http://opennaas.org/nsp/webservice/reservation", "getReservationsResponse", "pfx0"), new QName("http://opennaas.org/nsp/webservice/reservation", "cancelReservationResponse", "pfx0"), new QName("http://opennaas.org/nsp/webservice/reservation", "getReservationResponse", "pfx0")
    };

    private static final QName[][] _REQUEST_PARAM_NAMES = { {
            new QName("http://opennaas.org/nsp/webservice/reservation", "isAvailable", "pfx0")
        }, {
            new QName("http://opennaas.org/nsp/webservice/reservation", "activate", "pfx0")
        }, {
            new QName("http://opennaas.org/nsp/webservice/reservation", "cancelJob", "pfx0")
        }, {
            new QName("http://opennaas.org/nsp/webservice/reservation", "createReservation", "pfx0")
        }, {
            new QName("http://opennaas.org/nsp/webservice/reservation", "notification", "pfx0")
        }, {
            new QName("http://opennaas.org/nsp/webservice/reservation", "bind", "pfx0")
        }, {
            new QName("http://opennaas.org/nsp/webservice/reservation", "getStatus", "pfx0")
        }, {
            new QName("http://opennaas.org/nsp/webservice/reservation", "completeJob", "pfx0")
        }, {
            new QName("http://opennaas.org/nsp/webservice/reservation", "getReservations", "pfx0")
        }, {
            new QName("http://opennaas.org/nsp/webservice/reservation", "cancelReservation", "pfx0")
        }, {
            new QName("http://opennaas.org/nsp/webservice/reservation", "getReservation", "pfx0")
        }
    };
    public ReservationClient(EndpointReference param0) {
        super(param0);
    }

    public ReservationClient(EndpointReference param0, EndpointReference param1) {
        super(param0, param1);
    }

    public ReservationClient(EndpointReference param0, EndpointReference param1, Environment param2) {
        super(param0, param1, param2);
    }

    public ReservationClient(EndpointReference param0, EndpointReference param1, SoapClient param2) {
        super(param0, param1, param2);
    }

    protected ProxyHandler getHandler(String methodName) {
        return (ProxyHandler)_HANDLERS_BY_NAME.get(methodName);
    }

    private static final Map _HANDLERS_BY_NAME = new HashMap();

    static {
        for (int n = 0; n < _METHOD_NAMES.length; ++n) {
            ProxyHandler handler = new ReflectionProxyHandler();
            handler.setAction(_ACTIONS[n]);
            handler.setRequestName(_REQUEST_NAMES[n]);
            handler.setRequestParameterNames(_REQUEST_PARAM_NAMES[n]);
            handler.setResponseName(_RESPONSE_NAMES[n]);
            handler.setReturnType(_RETURN_TYPES[n]);

            _HANDLERS_BY_NAME.put(_METHOD_NAMES[n], handler);
        }
    }}
