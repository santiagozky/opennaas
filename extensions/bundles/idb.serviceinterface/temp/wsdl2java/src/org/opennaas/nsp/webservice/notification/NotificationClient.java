package org.opennaas.extensions.idb.serviceinterface.notification;

import org.w3c.dom.Element;
import org.apache.muse.core.Environment;
import org.apache.muse.ws.addressing.soap.SoapClient;
import java.util.HashMap;
import org.apache.muse.ws.addressing.soap.SoapFault;
import org.apache.muse.core.proxy.ReflectionProxyHandler;
import java.util.Map;
import org.apache.muse.ws.resource.remote.WsResourceClient;
import org.apache.muse.core.proxy.ProxyHandler;
import org.apache.muse.ws.addressing.EndpointReference;
import javax.xml.namespace.QName;

/**
 * notification client.
 *
 * NotificationClient.java
 * Thu May 17 20:58:12 CEST 2012
 * Generated by the Apache Muse Code Generation Tool
 */
 public class NotificationClient extends WsResourceClient implements INotificationClient {


    /**
     * removeTopic Handler.
     *
     * @param removeTopic Request
     * @return removeTopic Response
     * @throws SoapFault In case of errors
     */
    public Element removeTopic (Element removeTopic)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = removeTopic;

        ProxyHandler handler = getHandler("removeTopic");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }


    /**
     * addTopic Handler.
     *
     * @param addTopic Request
     * @return addTopic Response
     * @throws SoapFault In case of errors
     */
    public Element addTopic (Element addTopic)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = addTopic;

        ProxyHandler handler = getHandler("addTopic");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }


    /**
     * subscribe Handler.
     *
     * @param subscribe Request
     * @return subscribe Response
     * @throws SoapFault In case of errors
     */
    public Element subscribe (Element subscribe)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = subscribe;

        ProxyHandler handler = getHandler("subscribe");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }


    /**
     * unsubscribe Handler.
     *
     * @param unsubscribe Request
     * @return unsubscribe Response
     * @throws SoapFault In case of errors
     */
    public Element unsubscribe (Element unsubscribe)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = unsubscribe;

        ProxyHandler handler = getHandler("unsubscribe");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }


    /**
     * getTopics Handler.
     *
     * @param getTopics Request
     * @return getTopics Response
     * @throws SoapFault In case of errors
     */
    public Element getTopics (Element getTopics)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = getTopics;

        ProxyHandler handler = getHandler("getTopics");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }


    /**
     * publish Handler.
     *
     * @param publish Request
     * @return publish Response
     * @throws SoapFault In case of errors
     */
    public Element publish (Element publish)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = publish;

        ProxyHandler handler = getHandler("publish");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }

    private static final String[] _METHOD_NAMES = {
        "removeTopic", "addTopic", "subscribe", "unsubscribe", "getTopics", "publish"
    };

    private static final Class[] _RETURN_TYPES = {
        Element.class, Element.class, Element.class, Element.class, Element.class, Element.class
    };

    private static final String[] _ACTIONS = {
        "http://opennaas.org/nsp/webservice/notification/removeTopic", "http://opennaas.org/nsp/webservice/notification/addTopic", "http://opennaas.org/nsp/webservice/notification/subscribe", "http://opennaas.org/nsp/webservice/notification/unsubscribe", "http://opennaas.org/nsp/webservice/notification/getTopics", "http://opennaas.org/nsp/webservice/notification/publish"
    };

    private static final QName[] _REQUEST_NAMES = {
        new QName("http://opennaas.org/nsp/webservice/notification", "removeTopic", "pfx0"), new QName("http://opennaas.org/nsp/webservice/notification", "addTopic", "pfx0"), new QName("http://opennaas.org/nsp/webservice/notification", "subscribe", "pfx0"), new QName("http://opennaas.org/nsp/webservice/notification", "unsubscribe", "pfx0"), new QName("http://opennaas.org/nsp/webservice/notification", "getTopics", "pfx0"), new QName("http://opennaas.org/nsp/webservice/notification", "publish", "pfx0")
    };

    private static final QName[] _RESPONSE_NAMES = {
        new QName("http://opennaas.org/nsp/webservice/notification", "removeTopicResponse", "pfx0"), new QName("http://opennaas.org/nsp/webservice/notification", "addTopicResponse", "pfx0"), new QName("http://opennaas.org/nsp/webservice/notification", "subscribeResponse", "pfx0"), new QName("http://opennaas.org/nsp/webservice/notification", "unsubscribeResponse", "pfx0"), new QName("http://opennaas.org/nsp/webservice/notification", "getTopicsResponse", "pfx0"), new QName("http://opennaas.org/nsp/webservice/notification", "publishResponse", "pfx0")
    };

    private static final QName[][] _REQUEST_PARAM_NAMES = { {
            new QName("http://opennaas.org/nsp/webservice/notification", "removeTopic", "pfx0")
        }, {
            new QName("http://opennaas.org/nsp/webservice/notification", "addTopic", "pfx0")
        }, {
            new QName("http://opennaas.org/nsp/webservice/notification", "subscribe", "pfx0")
        }, {
            new QName("http://opennaas.org/nsp/webservice/notification", "unsubscribe", "pfx0")
        }, {
            new QName("http://opennaas.org/nsp/webservice/notification", "getTopics", "pfx0")
        }, {
            new QName("http://opennaas.org/nsp/webservice/notification", "publish", "pfx0")
        }
    };
    public NotificationClient(EndpointReference param0) {
        super(param0);
    }

    public NotificationClient(EndpointReference param0, EndpointReference param1) {
        super(param0, param1);
    }

    public NotificationClient(EndpointReference param0, EndpointReference param1, Environment param2) {
        super(param0, param1, param2);
    }

    public NotificationClient(EndpointReference param0, EndpointReference param1, SoapClient param2) {
        super(param0, param1, param2);
    }

    protected ProxyHandler getHandler(String methodName) {
        return (ProxyHandler)_HANDLERS_BY_NAME.get(methodName);
    }

    private static final Map _HANDLERS_BY_NAME = new HashMap();

    static {
        for (int n = 0; n < _METHOD_NAMES.length; ++n) {
            ProxyHandler handler = new ReflectionProxyHandler();
            handler.setAction(_ACTIONS[n]);
            handler.setRequestName(_REQUEST_NAMES[n]);
            handler.setRequestParameterNames(_REQUEST_PARAM_NAMES[n]);
            handler.setResponseName(_RESPONSE_NAMES[n]);
            handler.setReturnType(_RETURN_TYPES[n]);

            _HANDLERS_BY_NAME.put(_METHOD_NAMES[n], handler);
        }
    }}
