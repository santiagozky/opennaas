package org.opennaas.extensions.idb.serviceinterface.topology;

import org.apache.muse.ws.addressing.soap.SoapClient;
import javax.xml.namespace.QName;
import org.apache.muse.ws.addressing.soap.SoapFault;
import org.apache.muse.core.proxy.ReflectionProxyHandler;
import org.apache.muse.ws.addressing.EndpointReference;
import org.apache.muse.ws.resource.remote.WsResourceClient;
import java.util.Map;
import org.apache.muse.core.Environment;
import java.util.HashMap;
import org.apache.muse.core.proxy.ProxyHandler;
import org.w3c.dom.Element;

/**
 * topology client.
 *
 * TopologyClient.java
 * Mon May 14 09:27:31 CEST 2012
 * Generated by the Apache Muse Code Generation Tool
 */
 public class TopologyClient extends WsResourceClient implements ITopologyClient {


    /**
     * getEndpoints Handler.
     *
     * @param getEndpoints Request
     * @return getEndpoints Response
     * @throws SoapFault In case of errors
     */
    public Element getEndpoints (Element getEndpoints)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = getEndpoints;

        ProxyHandler handler = getHandler("getEndpoints");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }


    /**
     * editEndpoint Handler.
     *
     * @param editEndpoint Request
     * @return editEndpoint Response
     * @throws SoapFault In case of errors
     */
    public Element editEndpoint (Element editEndpoint)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = editEndpoint;

        ProxyHandler handler = getHandler("editEndpoint");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }


    /**
     * editDomain Handler.
     *
     * @param editDomain Request
     * @return editDomain Response
     * @throws SoapFault In case of errors
     */
    public Element editDomain (Element editDomain)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = editDomain;

        ProxyHandler handler = getHandler("editDomain");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }


    /**
     * editLink Handler.
     *
     * @param editLink Request
     * @return editLink Response
     * @throws SoapFault In case of errors
     */
    public Element editLink (Element editLink)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = editLink;

        ProxyHandler handler = getHandler("editLink");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }


    /**
     * addOrEditDomain Handler.
     *
     * @param addOrEditDomain Request
     * @return addOrEditDomain Response
     * @throws SoapFault In case of errors
     */
    public Element addOrEditDomain (Element addOrEditDomain)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = addOrEditDomain;

        ProxyHandler handler = getHandler("addOrEditDomain");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }


    /**
     * addLink Handler.
     *
     * @param addLink Request
     * @return addLink Response
     * @throws SoapFault In case of errors
     */
    public Element addLink (Element addLink)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = addLink;

        ProxyHandler handler = getHandler("addLink");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }


    /**
     * getDomains Handler.
     *
     * @param getDomains Request
     * @return getDomains Response
     * @throws SoapFault In case of errors
     */
    public Element getDomains (Element getDomains)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = getDomains;

        ProxyHandler handler = getHandler("getDomains");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }


    /**
     * addDomain Handler.
     *
     * @param addDomain Request
     * @return addDomain Response
     * @throws SoapFault In case of errors
     */
    public Element addDomain (Element addDomain)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = addDomain;

        ProxyHandler handler = getHandler("addDomain");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }


    /**
     * getLinks Handler.
     *
     * @param getLinks Request
     * @return getLinks Response
     * @throws SoapFault In case of errors
     */
    public Element getLinks (Element getLinks)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = getLinks;

        ProxyHandler handler = getHandler("getLinks");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }


    /**
     * addEndpoint Handler.
     *
     * @param addEndpoint Request
     * @return addEndpoint Response
     * @throws SoapFault In case of errors
     */
    public Element addEndpoint (Element addEndpoint)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = addEndpoint;

        ProxyHandler handler = getHandler("addEndpoint");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }


    /**
     * deleteLink Handler.
     *
     * @param deleteLink Request
     * @return deleteLink Response
     * @throws SoapFault In case of errors
     */
    public Element deleteLink (Element deleteLink)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = deleteLink;

        ProxyHandler handler = getHandler("deleteLink");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }


    /**
     * deleteDomain Handler.
     *
     * @param deleteDomain Request
     * @return deleteDomain Response
     * @throws SoapFault In case of errors
     */
    public Element deleteDomain (Element deleteDomain)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = deleteDomain;

        ProxyHandler handler = getHandler("deleteDomain");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }


    /**
     * deleteEndpoint Handler.
     *
     * @param deleteEndpoint Request
     * @return deleteEndpoint Response
     * @throws SoapFault In case of errors
     */
    public Element deleteEndpoint (Element deleteEndpoint)
            throws SoapFault {
        Object[] params = new Object[1];

        params[0] = deleteEndpoint;

        ProxyHandler handler = getHandler("deleteEndpoint");

        try {
            return (Element)invoke(handler, params);
        } catch (SoapFault e) {
            throw org.opennaas.extensions.idb.serviceinterface.databinding.utils.FaultConverter
                .getInstance().getOriginalFault(e, this.getDestination());
        }
    }

    private static final String[] _METHOD_NAMES = {
        "getEndpoints", "editEndpoint", "editDomain", "editLink", "addOrEditDomain", "addLink", "getDomains", "addDomain", "getLinks", "addEndpoint", "deleteLink", "deleteDomain", "deleteEndpoint"
    };

    private static final Class[] _RETURN_TYPES = {
        Element.class, Element.class, Element.class, Element.class, Element.class, Element.class, Element.class, Element.class, Element.class, Element.class, Element.class, Element.class, Element.class
    };

    private static final String[] _ACTIONS = {
        "http://opennaas.org/nsp/webservice/topology/getEndpoints", "http://opennaas.org/nsp/webservice/topology/editEndpoint", "http://opennaas.org/nsp/webservice/topology/editDomain", "http://opennaas.org/nsp/webservice/topology/editLink", "http://opennaas.org/nsp/webservice/topology/addOrEditDomain", "http://opennaas.org/nsp/webservice/topology/addLink", "http://opennaas.org/nsp/webservice/topology/getDomains", "http://opennaas.org/nsp/webservice/topology/addDomain", "http://opennaas.org/nsp/webservice/topology/getLinks", "http://opennaas.org/nsp/webservice/topology/addEndpoint", "http://opennaas.org/nsp/webservice/topology/deleteLink", "http://opennaas.org/nsp/webservice/topology/deleteDomain", "http://opennaas.org/nsp/webservice/topology/deleteEndpoint"
    };

    private static final QName[] _REQUEST_NAMES = {
        new QName("http://opennaas.org/nsp/webservice/topology", "getEndpoints", "pfx0"), new QName("http://opennaas.org/nsp/webservice/topology", "editEndpoint", "pfx0"), new QName("http://opennaas.org/nsp/webservice/topology", "editDomain", "pfx0"), new QName("http://opennaas.org/nsp/webservice/topology", "editLink", "pfx0"), new QName("http://opennaas.org/nsp/webservice/topology", "addOrEditDomain", "pfx0"), new QName("http://opennaas.org/nsp/webservice/topology", "addLink", "pfx0"), new QName("http://opennaas.org/nsp/webservice/topology", "getDomains", "pfx0"), new QName("http://opennaas.org/nsp/webservice/topology", "addDomain", "pfx0"), new QName("http://opennaas.org/nsp/webservice/topology", "getLinks", "pfx0"), new QName("http://opennaas.org/nsp/webservice/topology", "addEndpoint", "pfx0"), new QName("http://opennaas.org/nsp/webservice/topology", "deleteLink", "pfx0"), new QName("http://opennaas.org/nsp/webservice/topology", "deleteDomain", "pfx0"), new QName("http://opennaas.org/nsp/webservice/topology", "deleteEndpoint", "pfx0")
    };

    private static final QName[] _RESPONSE_NAMES = {
        new QName("http://opennaas.org/nsp/webservice/topology", "getEndpointsResponse", "pfx0"), new QName("http://opennaas.org/nsp/webservice/topology", "editEndpointResponse", "pfx0"), new QName("http://opennaas.org/nsp/webservice/topology", "editDomainResponse", "pfx0"), new QName("http://opennaas.org/nsp/webservice/topology", "editLinkResponse", "pfx0"), new QName("http://opennaas.org/nsp/webservice/topology", "addOrEditDomainResponse", "pfx0"), new QName("http://opennaas.org/nsp/webservice/topology", "addLinkResponse", "pfx0"), new QName("http://opennaas.org/nsp/webservice/topology", "getDomainsResponse", "pfx0"), new QName("http://opennaas.org/nsp/webservice/topology", "addDomainResponse", "pfx0"), new QName("http://opennaas.org/nsp/webservice/topology", "getLinksResponse", "pfx0"), new QName("http://opennaas.org/nsp/webservice/topology", "addEndpointResponse", "pfx0"), new QName("http://opennaas.org/nsp/webservice/topology", "deleteLinkResponse", "pfx0"), new QName("http://opennaas.org/nsp/webservice/topology", "deleteDomainResponse", "pfx0"), new QName("http://opennaas.org/nsp/webservice/topology", "deleteEndpointResponse", "pfx0")
    };

    private static final QName[][] _REQUEST_PARAM_NAMES = { {
            new QName("http://opennaas.org/nsp/webservice/topology", "getEndpoints", "pfx0")
        }, {
            new QName("http://opennaas.org/nsp/webservice/topology", "editEndpoint", "pfx0")
        }, {
            new QName("http://opennaas.org/nsp/webservice/topology", "editDomain", "pfx0")
        }, {
            new QName("http://opennaas.org/nsp/webservice/topology", "editLink", "pfx0")
        }, {
            new QName("http://opennaas.org/nsp/webservice/topology", "addOrEditDomain", "pfx0")
        }, {
            new QName("http://opennaas.org/nsp/webservice/topology", "addLink", "pfx0")
        }, {
            new QName("http://opennaas.org/nsp/webservice/topology", "getDomains", "pfx0")
        }, {
            new QName("http://opennaas.org/nsp/webservice/topology", "addDomain", "pfx0")
        }, {
            new QName("http://opennaas.org/nsp/webservice/topology", "getLinks", "pfx0")
        }, {
            new QName("http://opennaas.org/nsp/webservice/topology", "addEndpoint", "pfx0")
        }, {
            new QName("http://opennaas.org/nsp/webservice/topology", "deleteLink", "pfx0")
        }, {
            new QName("http://opennaas.org/nsp/webservice/topology", "deleteDomain", "pfx0")
        }, {
            new QName("http://opennaas.org/nsp/webservice/topology", "deleteEndpoint", "pfx0")
        }
    };
    public TopologyClient(EndpointReference param0) {
        super(param0);
    }

    public TopologyClient(EndpointReference param0, EndpointReference param1) {
        super(param0, param1);
    }

    public TopologyClient(EndpointReference param0, EndpointReference param1, Environment param2) {
        super(param0, param1, param2);
    }

    public TopologyClient(EndpointReference param0, EndpointReference param1, SoapClient param2) {
        super(param0, param1, param2);
    }

    protected ProxyHandler getHandler(String methodName) {
        return (ProxyHandler)_HANDLERS_BY_NAME.get(methodName);
    }

    private static final Map _HANDLERS_BY_NAME = new HashMap();

    static {
        for (int n = 0; n < _METHOD_NAMES.length; ++n) {
            ProxyHandler handler = new ReflectionProxyHandler();
            handler.setAction(_ACTIONS[n]);
            handler.setRequestName(_REQUEST_NAMES[n]);
            handler.setRequestParameterNames(_REQUEST_PARAM_NAMES[n]);
            handler.setResponseName(_RESPONSE_NAMES[n]);
            handler.setReturnType(_RETURN_TYPES[n]);

            _HANDLERS_BY_NAME.put(_METHOD_NAMES[n], handler);
        }
    }}
